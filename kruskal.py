import random
import numpy as np
import matplotlib.pyplot as plt

def GetData():
    X = np.array([
    [-5.49159288385884, 3.60777181278738],
    [3.16297119612360, -2.07824724999972],
    [0.0467373721026226, 2.66256344910329],
    [-5.66881945204961, 3.32716307981866],
    [3.42881104840975, -2.06347836931715],
    [-0.160026957453272, 2.35241695476945],
    [-5.75743273614499, 2.88409665934175],
    [3.87187746888667, -2.13732277272997],
    [-0.292946883596346, 2.08657710248330],
    [-5.90512154297063, 2.45579911954739],
    [4.04910403707743, -2.60992695457202],
    [-0.440635690421986, 1.77643060814946],
    [-6.00000000000000, 2.00000000000000],
    [4.00000000000000, -3.00000000000000],
    [-0.544017855199932, 1.48105299449818],
    [-5.27005967362038, 3.65207845483507],
    [3.76849530410872, -3.17114442050944],
    [0.00000000000000, 1.21521314221203],
    [-5.06329534406449, 3.13516763094533],
    [3.50265545182257, -3.36313986938277],
    [0.253501701658517, 1.25951978425972],
    [-4.95991317928654, 2.69210121046842],
    [3.25158448021898, -3.48129091484328],
    [0.622723718722615, 1.30382642630741],
    [-4.84176213382602, 2.08657710248330],
    [3.79803306547385, -3.52559755689098],
    [1.11009678124722, 1.30382642630741],
    [-4.72361108836552, 1.43674635245049],
    [4.16725508253794, -3.71759300576431],
    [1.78946529264516, 1.33336418767254],
    [-4.72361108836552, 0.875528886513060],
    [4.28540612799845, -3.93912621600276],
    [-6.06757923047883, 1.70258620473664],
    [4.41832605414154, -4.27881047170174],
    [-6.27434356003473, 1.18567538084690],
    [4.34448165072871, -4.63326360808328],
    [-6.39249460549524, 0.757377841052549],
    [4.09341067912512, -4.75141465354378],
    [-5.75743273614499, 2.10134598316586],
    [3.66511313933077, -4.81049017627404],
    [-5.44728624181115, 2.13088374453099],
    [3.00000000000000, -4.00000000000000],
    [-5.07806422474704, 2.14565262521355],
    [-0.484942332469678, 3.82930502302583],
    [2.83805582110720, -2.06347836931715],
    [0.00000000000000, 4.00000000000000],
    [2.83805582110720, -2.41793150569868],
    [0.534110434627230, 3.96222494916891],
    [2.85282470178976, -3.14160665914431],
    [1.00000000000000, 4.00000000000000],
    [2.85282470178976, -3.64374860235149],
    [1.50885655967645, 3.85884278439096],
    [2.86759358247232, -4.33788599443199],
    [1.30209223012055, 3.63730957415250],
    [2.94143798588514, -4.76618353422635],
    [0.932870213056456, 3.41577636391405],
    [2.74944253701181, -2.77238464208022],
    [0.578417076674923, 3.13516763094533],
    ])
    return X

def Euclidean(x,y):
    return np.sqrt(np.sum((x-y)**2))

class DSU:
    def __init__(self, n):
        self.n = n
        self.p = np.ones(n, dtype=int) * -1
    def Get(self, x):
        if self.p[x] == -1: return x
        self.p[x] = self.Get(self.p[x])
        return self.p[x]
    def Union(self, a, b):
        a = self.Get(a)
        b = self.Get(b)
        if a == b: return
        self.p[a] = b

#method gets: viborka, count clasters we want, should we draw graphic?, metric        
def Kruskal(X, needclasses, plotGraph=False, ro=Euclidean):
    l = X.shape[0]
    edges = []
    for i in range(l):
        for j in range(i+1,l):
            edges.append((ro(X[i],X[j]), i, j))
    edges = sorted(edges, key=lambda x: x[0])

    union = DSU(l)
    classes = l
    now = 0
    costs = []
    nclasses=[]
    while classes > needclasses:
        a = edges[now][1]
        b = edges[now][2]
        if union.Get(a) != union.Get(b):
            costs.append(edges[now][0])
            nclasses.append(classes-1)
            union.Union(a, b)
            classes -= 1
        now += 1

    # form classes
    dict = {}
    classes = 0
    for i in range(l):
        now = union.Get(i)
        if now not in dict:
            dict[now] = classes
            classes += 1

            
    y = np.zeros(l)
    for i in range(l):
        now = union.Get(i)
        y[i] = dict[now]
        
    if plotGraph:
        plt.xlabel('count classes')
        plt.ylabel('edge cost')
        plt.plot(nclasses, costs)
        plt.show()
        
    return y

X = GetData()
y = Kruskal(X,2,True)
#y = Kruskal(X,3,True)
print(y)
plt.scatter(X[:,0],X[:,1], c=y)
plt.show()
